//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Fantasie
{
    public partial class @InputControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""7f4e572a-cf9f-4ad6-9cb6-ca9d467197a1"",
            ""actions"": [
                {
                    ""name"": ""Motion"",
                    ""type"": ""Value"",
                    ""id"": ""adc09527-a61f-41d4-ae29-09d4e949e247"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""218b1702-ba71-46d4-a95d-f96738f0829c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""e05447dc-e54d-429d-bd35-d0a1afeae615"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CastUltimate"",
                    ""type"": ""Button"",
                    ""id"": ""e9c4be0a-291a-4eff-b854-40c5b4789e3f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HeavyShoot"",
                    ""type"": ""Button"",
                    ""id"": ""89229578-985b-4e30-9d49-1a87c3f83540"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interract"",
                    ""type"": ""Button"",
                    ""id"": ""fca929dd-f2e6-4315-8140-e56a74002387"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Movement"",
                    ""id"": ""43506a05-95b4-4363-b3c0-4e0be8317b17"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d5fb2892-fece-4a8c-b01a-c409def8164c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d4eca752-7cd8-498d-b486-43bc252ee914"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a215673a-11b6-4a8e-90d2-81c696d6187e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b26967e3-0af3-44eb-8aa0-68aa559e706e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CastUltimate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""UpVector"",
                    ""id"": ""e44d17a1-0ed3-45b6-a071-6e04d47dd78b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""28291558-48ec-4c75-bdf6-25415471818e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d82fd0e4-6e96-4052-ba5e-b0a9781b589d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""86ab2285-3a5c-43b6-a042-359c64f00faa"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeavyShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""593b7e86-a532-44f6-92f2-084bcf054d84"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Motion = m_Player.FindAction("Motion", throwIfNotFound: true);
            m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
            m_Player_Shoot = m_Player.FindAction("Shoot", throwIfNotFound: true);
            m_Player_CastUltimate = m_Player.FindAction("CastUltimate", throwIfNotFound: true);
            m_Player_HeavyShoot = m_Player.FindAction("HeavyShoot", throwIfNotFound: true);
            m_Player_Interract = m_Player.FindAction("Interract", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_Motion;
        private readonly InputAction m_Player_Jump;
        private readonly InputAction m_Player_Shoot;
        private readonly InputAction m_Player_CastUltimate;
        private readonly InputAction m_Player_HeavyShoot;
        private readonly InputAction m_Player_Interract;
        public struct PlayerActions
        {
            private @InputControls m_Wrapper;
            public PlayerActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Motion => m_Wrapper.m_Player_Motion;
            public InputAction @Jump => m_Wrapper.m_Player_Jump;
            public InputAction @Shoot => m_Wrapper.m_Player_Shoot;
            public InputAction @CastUltimate => m_Wrapper.m_Player_CastUltimate;
            public InputAction @HeavyShoot => m_Wrapper.m_Player_HeavyShoot;
            public InputAction @Interract => m_Wrapper.m_Player_Interract;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @Motion.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMotion;
                    @Motion.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMotion;
                    @Motion.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMotion;
                    @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                    @Shoot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                    @Shoot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                    @Shoot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                    @CastUltimate.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCastUltimate;
                    @CastUltimate.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCastUltimate;
                    @CastUltimate.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCastUltimate;
                    @HeavyShoot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHeavyShoot;
                    @HeavyShoot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHeavyShoot;
                    @HeavyShoot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHeavyShoot;
                    @Interract.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInterract;
                    @Interract.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInterract;
                    @Interract.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInterract;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Motion.started += instance.OnMotion;
                    @Motion.performed += instance.OnMotion;
                    @Motion.canceled += instance.OnMotion;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Shoot.started += instance.OnShoot;
                    @Shoot.performed += instance.OnShoot;
                    @Shoot.canceled += instance.OnShoot;
                    @CastUltimate.started += instance.OnCastUltimate;
                    @CastUltimate.performed += instance.OnCastUltimate;
                    @CastUltimate.canceled += instance.OnCastUltimate;
                    @HeavyShoot.started += instance.OnHeavyShoot;
                    @HeavyShoot.performed += instance.OnHeavyShoot;
                    @HeavyShoot.canceled += instance.OnHeavyShoot;
                    @Interract.started += instance.OnInterract;
                    @Interract.performed += instance.OnInterract;
                    @Interract.canceled += instance.OnInterract;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        public interface IPlayerActions
        {
            void OnMotion(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnShoot(InputAction.CallbackContext context);
            void OnCastUltimate(InputAction.CallbackContext context);
            void OnHeavyShoot(InputAction.CallbackContext context);
            void OnInterract(InputAction.CallbackContext context);
        }
    }
}
